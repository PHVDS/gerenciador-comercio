package br.com.walison.lucros.visao;

import br.com.walison.lucros.visao.outras.JProdutoNaoCadastrado;
import br.com.walison.lucros.classes.Janela;
import br.com.walison.lucros.classes.modelos.Cliente;
import br.com.walison.lucros.classes.modelos.Subtotal;
import br.com.walison.lucros.classes.Conexao;
import br.com.walison.lucros.classes.FormatoNumerico;
import br.com.walison.lucros.classes.Mensagem;
import br.com.walison.lucros.classes.modelos.Produto;
import br.com.walison.lucros.classes.TrataNumeros;
import br.com.walison.lucros.classes.modelos.Venda;
import br.com.walison.lucros.excecoes.EstoqueInsuficienteException;
import br.com.walison.lucros.excecoes.SaldoInsuficienteException;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Walison Cecílio
 */
public class JPrincipal extends javax.swing.JPanel {

    /**
     * Creates new form JVender
     */
    public JPrincipal() throws SQLException {
        this.venda = new Venda();
        initComponents();
        UIManager.put("OptionPane.messageFont", new FontUIResource(new Font("ARIAL", Font.PLAIN, 25)));
        this.radioVista.setSelected(true);
        this.din = new  FormatoNumerico();
        this.lValor.setText("R$ 00,00");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCompras = new javax.swing.JTable();
        lValorRecebido = new javax.swing.JLabel();
        lTroco = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        valorDaCompra = new javax.swing.JLabel();
        lValor = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lUltimoAdicionado = new javax.swing.JLabel();
        bFecharVenda = new javax.swing.JButton();
        cPesquisa = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaProd = new javax.swing.JTable();
        cli = new javax.swing.JLabel();
        radioVista = new javax.swing.JRadioButton();
        radioConta = new javax.swing.JRadioButton();
        panelCli = new javax.swing.JPanel();
        lbuscarCliente = new javax.swing.JLabel();
        cPesquisaCliente = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaCli = new javax.swing.JTable();
        bProdutoNaoCadastrado = new javax.swing.JButton();
        cli1 = new javax.swing.JLabel();

        jPanel1.setBorder(new javax.swing.border.LineBorder(java.awt.Color.blue, 1, true));

        tabelaCompras.setAutoCreateRowSorter(true);
        tabelaCompras.setBorder(null);
        tabelaCompras.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        tabelaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seq.", "Descrição", "Qtde", "Preço", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCompras.setColumnSelectionAllowed(true);
        tabelaCompras.setGridColor(new java.awt.Color(254, 254, 254));
        tabelaCompras.setOpaque(false);
        tabelaCompras.setRowHeight(25);
        tabelaCompras.setRowMargin(4);
        tabelaCompras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaComprasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaCompras);
        tabelaCompras.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (tabelaCompras.getColumnModel().getColumnCount() > 0) {
            tabelaCompras.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelaCompras.getColumnModel().getColumn(0).setMaxWidth(50);
            tabelaCompras.getColumnModel().getColumn(2).setPreferredWidth(85);
            tabelaCompras.getColumnModel().getColumn(2).setMaxWidth(85);
            tabelaCompras.getColumnModel().getColumn(3).setPreferredWidth(120);
            tabelaCompras.getColumnModel().getColumn(3).setMaxWidth(120);
            tabelaCompras.getColumnModel().getColumn(4).setPreferredWidth(120);
            tabelaCompras.getColumnModel().getColumn(4).setMaxWidth(120);
        }

        lValorRecebido.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        lValorRecebido.setForeground(new java.awt.Color(34, 100, 41));

        lTroco.setFont(new java.awt.Font("Cantarell", 1, 24)); // NOI18N
        lTroco.setForeground(new java.awt.Color(255, 22, 4));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lTroco, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 999, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lValorRecebido, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lValorRecebido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lTroco)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(50, 90, 182));

        valorDaCompra.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N
        valorDaCompra.setText(" Valor Total:");

        lValor.setFont(new java.awt.Font("Cantarell", 0, 36)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(294, 294, 294)
                .addComponent(valorDaCompra)
                .addGap(199, 199, 199)
                .addComponent(lValor, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valorDaCompra)
                    .addComponent(lValor))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(128, 143, 196));
        jPanel2.setBorder(null);

        lUltimoAdicionado.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lUltimoAdicionado.setToolTipText("");
        lUltimoAdicionado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lUltimoAdicionado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lUltimoAdicionado)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bFecharVenda.setBackground(new java.awt.Color(119, 145, 191));
        bFecharVenda.setFont(new java.awt.Font("Cantarell", 0, 24)); // NOI18N
        bFecharVenda.setText("Fechar Venda");
        bFecharVenda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bFecharVendaMouseClicked(evt);
            }
        });
        bFecharVenda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFecharVendaActionPerformed(evt);
            }
        });

        cPesquisa.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        cPesquisa.setToolTipText("Codigo ou Nome do Produto");
        cPesquisa.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cPesquisaInputMethodTextChanged(evt);
            }
        });
        cPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cPesquisaActionPerformed(evt);
            }
        });
        cPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cPesquisaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cPesquisaKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Courier 10 Pitch", 1, 15)); // NOI18N
        jLabel4.setText("walison.cecilio@souunit.com.br");

        tabelaProd.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        tabelaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaProd.setRowHeight(25);
        tabelaProd.setRowMargin(3);
        tabelaProd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProdMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaProd);

        cli.setFont(new java.awt.Font("Cantarell", 1, 14)); // NOI18N

        radioVista.setText("À VISTA");
        radioVista.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                radioVistaComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                radioVistaComponentRemoved(evt);
            }
        });
        radioVista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioVistaMouseClicked(evt);
            }
        });

        radioConta.setText("CONTA");
        radioConta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioContaMouseClicked(evt);
            }
        });

        lbuscarCliente.setFont(new java.awt.Font("Cantarell", 1, 18)); // NOI18N
        lbuscarCliente.setText("Buscar Cliente");

        cPesquisaCliente.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        cPesquisaCliente.setToolTipText("Codigo ou Nome do Produto");
        cPesquisaCliente.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                cPesquisaClienteInputMethodTextChanged(evt);
            }
        });
        cPesquisaCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cPesquisaClienteActionPerformed(evt);
            }
        });
        cPesquisaCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cPesquisaClienteKeyReleased(evt);
            }
        });

        tabelaCli.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        tabelaCli.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaCli.setRowHeight(25);
        tabelaCli.setRowMargin(3);
        tabelaCli.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaCliMouseClicked(evt);
            }
        });
        tabelaCli.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaCliKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(tabelaCli);

        javax.swing.GroupLayout panelCliLayout = new javax.swing.GroupLayout(panelCli);
        panelCli.setLayout(panelCliLayout);
        panelCliLayout.setHorizontalGroup(
            panelCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCliLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cPesquisaCliente)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
                .addGap(181, 181, 181))
            .addGroup(panelCliLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(lbuscarCliente)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCliLayout.setVerticalGroup(
            panelCliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCliLayout.createSequentialGroup()
                .addComponent(lbuscarCliente)
                .addGap(12, 12, 12)
                .addComponent(cPesquisaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bProdutoNaoCadastrado.setText("Produto Não Cadastrado");
        bProdutoNaoCadastrado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bProdutoNaoCadastradoMouseClicked(evt);
            }
        });
        bProdutoNaoCadastrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProdutoNaoCadastradoActionPerformed(evt);
            }
        });

        cli1.setFont(new java.awt.Font("Cantarell", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelCli, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(radioVista)
                                        .addGap(137, 137, 137)
                                        .addComponent(radioConta))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(cPesquisa)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
                                    .addComponent(bProdutoNaoCadastrado, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bFecharVenda, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cli, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(cli1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioVista)
                            .addComponent(radioConta))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelCli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bProdutoNaoCadastrado))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bFecharVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cli, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(cli1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(671, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cPesquisaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cPesquisaInputMethodTextChanged
            
    }//GEN-LAST:event_cPesquisaInputMethodTextChanged

    private void cPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cPesquisaKeyReleased
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.tabelaProd.getModel();
            
            if((!this.cPesquisa.getText().equals("") || this.cPesquisa.getText() != null) && this.cPesquisa.getText().length() > 0)
                this.buscaProdutoPorNome();
            else
                modelo.setNumRows(0);
        } catch (SQLException ex) {
            Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cPesquisaKeyReleased

    private void cPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cPesquisaActionPerformed

    private void tabelaComprasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaComprasMouseClicked
        
        DefaultTableModel modeloTable = (DefaultTableModel) this.getTabela().getModel();
        int index = this.getTabela().getSelectedRow();
        Produto produto = (Produto) this.getTabela().getValueAt(index, 1);
        
        if(JOptionPane.showConfirmDialog(null, "Retirar \n" + produto + " da compra?") == 0){
            modeloTable.setNumRows(0);

            short qtd = 0;
             
            for(Subtotal c : this.getVenda().getCompras()){
                if(c.getProduto().getCod_prod() == produto.getCod_prod())
                    qtd = c.getQtd_prod();
            }
            
            short qtd_estoque = (short) (this.produtos.get(produto.getCod_prod()).getQtd_estoque() - qtd);
           
            this.getVenda().removerCompra(produto);
            
            try {
                this.produtos.get(produto.getCod_prod()).setQtd_estoque(qtd_estoque);
            } catch (Exception ex) {
                new Mensagem().msg("Não foi possivel remover o produto!!");
            }
            
            int i = 1;

            for(Subtotal c : this.getVenda().getCompras()){
                Object linha[] = { ""+(i++), c.getProduto(), ""+c.getQtd_prod(), this.din.din(c.getProduto().getVl_prod()), this.din.din(c.getVl_com()) };
                modeloTable.addRow(linha);
            }
            this.cPesquisa.setText("");
            this.getlValor().setText(din.din(this.getVenda().getVl_ven())); 
        
            JOptionPane.showMessageDialog(null, produto + " retirado da compra!"); //0 sim - 1 nao - 2 cancelar
        }
    }//GEN-LAST:event_tabelaComprasMouseClicked

    private void tabelaProdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaProdMouseClicked

       int index = this.tabelaProd.getSelectedRow(); 
       Produto produto = (Produto) this.tabelaProd.getValueAt(index, 0);       
       
       try{
            short qtde = this.quantidadeDeProdutos(produto);
            
            if(produto.getQtd_estoque() > 0){
                Subtotal compra = new Subtotal(produto, qtde, produto.getVl_prod());
                short qtd_estoque = compra.getProduto().getQtd_estoque();
                this.produtos.get(compra.getProduto().getCod_prod()).setQtd_estoque((short) (qtd_estoque - qtde));
                this.adicionarCompraNaVenda(compra, qtde);
            }
            
        }catch(java.lang.NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Favor: Informe um numero inteiro");
        }catch(java.lang.NullPointerException e2){
            JOptionPane.showMessageDialog(null, "Cacelado!");
        } catch (EstoqueInsuficienteException ex) {
            Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tabelaProdMouseClicked

    private void cPesquisaClienteInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_cPesquisaClienteInputMethodTextChanged
        
    }//GEN-LAST:event_cPesquisaClienteInputMethodTextChanged

    private void cPesquisaClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cPesquisaClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cPesquisaClienteActionPerformed

    private void cPesquisaClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cPesquisaClienteKeyReleased
       try {
           if(!this.cPesquisaCliente.getText().equals(""))
                this.buscaCliente();
           else{
              DefaultTableModel modeloTable = (DefaultTableModel) this.getTabelaCli().getModel();
              modeloTable.setNumRows(0);
           }
               
        } catch (SQLException ex) {
            Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cPesquisaClienteKeyReleased

    private void tabelaCliMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaCliMouseClicked
        int index = this.getTabelaCli().getSelectedRow();
        
        Cliente cliente = (Cliente) this.getTabelaCli().getValueAt(index, 0);
        
        this.setCliente(cliente);
        this.cli.setText(this.cliente.info());
        JOptionPane.showMessageDialog(null, cliente);

    }//GEN-LAST:event_tabelaCliMouseClicked

    private void tabelaCliKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaCliKeyReleased
        
    }//GEN-LAST:event_tabelaCliKeyReleased

    private void radioVistaComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_radioVistaComponentAdded

    }//GEN-LAST:event_radioVistaComponentAdded

    private void radioVistaComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_radioVistaComponentRemoved
        
    }//GEN-LAST:event_radioVistaComponentRemoved

    private void radioVistaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioVistaMouseClicked
        this.radioConta.setSelected(false);    
        this.panelCli.setVisible(false);
        this.cliente = null;
        this.cli.setText("");
        DefaultTableModel modeloTable = (DefaultTableModel) this.getTabelaCli().getModel();
        modeloTable.setNumRows(0);
        this.cPesquisaCliente.setText("");
    }//GEN-LAST:event_radioVistaMouseClicked

    private void radioContaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioContaMouseClicked
        this.radioVista.setSelected(false);
        this.panelCli.setVisible(true);
    }//GEN-LAST:event_radioContaMouseClicked

    private void bFecharVendaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bFecharVendaMouseClicked
        try {
            this.fecharVenda();
        } catch (SQLException ex) {
            Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SaldoInsuficienteException ex){
             JOptionPane.showMessageDialog(null,"O cliente nao tem saldo suficiente para realizar a compra!!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "O valor recebido deve ser maior ou igual o valor da venda!!");
        }
    }//GEN-LAST:event_bFecharVendaMouseClicked

    private void bProdutoNaoCadastradoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bProdutoNaoCadastradoMouseClicked
        Janela j2 = new Janela(500, 500);
        JProdutoNaoCadastrado a = new JProdutoNaoCadastrado();
        a.setPrincipal(this.j);
        a.setJ(j2);
        j2.setVisible(true);
        j2.setResizable(false);
        j2.add(a);
        
        this.j.setEnabled(false);
    }//GEN-LAST:event_bProdutoNaoCadastradoMouseClicked

    private void bProdutoNaoCadastradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProdutoNaoCadastradoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bProdutoNaoCadastradoActionPerformed

    private void cPesquisaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cPesquisaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                this.buscarProdutoPorCodigo();
            } catch (SQLException ex) {
                Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (EstoqueInsuficienteException ex) {
                Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
             this.cPesquisa.setText("");
        }
    }//GEN-LAST:event_cPesquisaKeyPressed

    private void bFecharVendaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFecharVendaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bFecharVendaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bFecharVenda;
    private javax.swing.JButton bProdutoNaoCadastrado;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField cPesquisa;
    private javax.swing.JTextField cPesquisaCliente;
    private javax.swing.JLabel cli;
    private javax.swing.JLabel cli1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lTroco;
    private javax.swing.JLabel lUltimoAdicionado;
    private javax.swing.JLabel lValor;
    private javax.swing.JLabel lValorRecebido;
    private javax.swing.JLabel lbuscarCliente;
    private javax.swing.JPanel panelCli;
    private javax.swing.JRadioButton radioConta;
    private javax.swing.JRadioButton radioVista;
    private javax.swing.JTable tabelaCli;
    private javax.swing.JTable tabelaCompras;
    private javax.swing.JTable tabelaProd;
    private javax.swing.JLabel valorDaCompra;
    // End of variables declaration//GEN-END:variables
     private Janela j;
    private Janela j2;
    private FormatoNumerico din;
    private Venda venda;
    private Cliente cliente;
    private TreeMap<Integer, Produto> produtos;
    
    private boolean buscarProdutoPorCodigo() throws SQLException, EstoqueInsuficienteException{
        Connection conexao = new Conexao().getConexao();

        try {
            try{
                PreparedStatement stmt = conexao.prepareStatement("SELECT * FROM produtos WHERE cod_bar_prod = ? AND qtd_estoque >= 1 LIMIT 1;");
                stmt.setString(1, this.getcPesquisa().getText().trim());
                ResultSet rs = stmt.executeQuery();

                if(!rs.isBeforeFirst()){
                    rs.close();
                    conexao.close();
                    new Mensagem().msg("Produto não cadastrado ou com estoque vazio!!");
                    return false;
                }
                
                if(rs.next()){  
                    Produto produto = this.montaProduto(rs);
                    short quantidadeProduto = this.quantidadeDeProdutos(produto);
                    
                    if(quantidadeProduto > 0){
                        Subtotal compra =  new Subtotal(produto, quantidadeProduto, produto.getVl_prod());
                        short qtd = (short) (this.produtos.get(compra.getProduto().getCod_prod()).getQtd_estoque() - quantidadeProduto);
                        this.produtos.get(compra.getProduto().getCod_prod()).setQtd_estoque(qtd);
                        this.lUltimoAdicionado.setText(compra.getProduto().toString());
                        this.adicionarCompraNaVenda(compra, quantidadeProduto);
                    }
                }
                
                conexao.close();
                this.cPesquisa.requestFocus();
            }catch (com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException e){ 
                conexao.close();
                this.buscaProdutoPorNome();
            }
        } catch (SQLException ex) {
            Logger.getLogger(JPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } 
        return true;
    }
    
    public boolean buscaProdutoPorNome() throws SQLException{
        String sql = "select * from produtos where nom_prod LIKE  '%" + this.cPesquisa.getText().trim() + "%' and qtd_estoque > 0;";

        DefaultTableModel modeloTable = (DefaultTableModel) this.tabelaProd.getModel();
        Connection conexao = new Conexao().getConexao();
        
        ResultSet rs = conexao.createStatement().executeQuery(sql);
                
        if(!rs.isBeforeFirst()){
            rs.close();
            conexao.close();
            return false;
        }
     
        modeloTable.setNumRows(0);
       
        while(rs.next()){
            Produto produto = new Produto(Short.parseShort(rs.getString(1)), rs.getString(2), rs.getString(3), Float.parseFloat(rs.getString(4)),  rs.getString(5), rs.getBoolean(6), rs.getString(7), rs.getBoolean(8), rs.getShort(9));          
            Object linha[] = { produto };
            modeloTable.addRow(linha);
        }
        rs.close();
        conexao.close();
        return true;
    }
    
    public boolean buscaCliente() throws SQLException{
        String sql = "SELECT * FROM clientes WHERE nom_cli LIKE '%" + this.getcPesquisaCliente().getText() + "%' ORDER BY nom_cli;";
        DefaultTableModel modeloTable = (DefaultTableModel) this.getTabelaCli().getModel();
        Connection conexao = new Conexao().getConexao();
        
        ResultSet rs = conexao.createStatement().executeQuery(sql);
                
        if(!rs.isBeforeFirst()){
            rs.close();
            conexao.close();
            return false;
        }
        
        modeloTable.setNumRows(0);
        
        while(rs.next()){
            Cliente cliente = new Cliente(Short.parseShort(rs.getString(1)), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5) , Short.parseShort(rs.getString(6)), rs.getString(7), Short.parseShort(rs.getString(8)), rs.getString(9), rs.getString(10), rs.getString(11), rs.getString(12), rs.getString(13));
            Object linha[] = { cliente };
            modeloTable.addRow(linha);
        }
        
        rs.close();
        conexao.close();
        return true;
    }
    
    public void UpdateTabelaEstoque(Subtotal compra, Connection conexao, short qtd) throws SQLException{
        short qtd_prod = 1;
        short qtd_ven = 0;
        short lote = 0;
        boolean loop = true;
        
        while(loop){
            PreparedStatement stmt = conexao.prepareStatement("SELECT qtd_prod, qtd_venda_prod, cod_lote FROM estoque WHERE qtd_prod > qtd_venda_prod and cod_prod = ? LIMIT 1");
            stmt.setShort(1, (short) compra.getProduto().getCod_prod());
            ResultSet r = stmt.executeQuery();
            
            if(r.next()){
                qtd_prod = r.getShort(1);
                qtd_ven = r.getShort(2);
                lote = r.getShort(3);
            }
            
            if(qtd <= (qtd_prod - qtd_ven) && qtd != 0 && lote != 0){
                PreparedStatement st = conexao.prepareStatement("UPDATE estoque SET qtd_venda_prod = qtd_venda_prod + ? WHERE cod_lote = ?;");
                st.setShort(1, qtd);
                st.setShort(2, lote);
                st.execute();
                
                PreparedStatement sts = conexao.prepareStatement("INSERT INTO lote_estoque (cod_lote, qtd, cod_ven) VALUES (?, ?, ?);");
                sts.setShort(1, lote);
                sts.setShort(2, qtd);
                sts.setShort(3, this.venda.getCod_ven());
                sts.execute();
                loop = false;
            }else{
                short aux = (short) (qtd_prod - qtd_ven);
                PreparedStatement st = conexao.prepareStatement("UPDATE estoque SET qtd_venda_prod = qtd_venda_prod + ? WHERE cod_lote = ?;");
                st.setShort(1, aux);
                st.setShort(2, lote);
                st.execute();
                
                PreparedStatement sts = conexao.prepareStatement("INSERT INTO lote_estoque (cod_lote, qtd, cod_ven) VALUES (?, ?, ?);");
                sts.setShort(1, lote);
                sts.setShort(2, aux);
                sts.setShort(3, this.venda.getCod_ven());
                sts.execute();
                qtd -= aux;
            } 
        }
    }
    
    public void atualizarEstoqueAposVenda(Connection conexao) throws SQLException{
        for(Subtotal c : this.venda.getCompras()){
            if(!c.getProduto().isCadastrado())
                return;
            
            PreparedStatement stmt = conexao.prepareStatement("UPDATE produtos SET qtd_estoque = (? - qtd_estoque) * (-1) where cod_prod = ?;");
            this.UpdateTabelaEstoque(c, conexao, c.getQtd_prod());

            stmt.setInt(1, c.getQtd_prod());
            stmt.setInt(2, c.getProduto().getCod_prod());
            stmt.execute();
        }
    }

  
    private float clienteEVazio() {
        if(this.cliente == null){
            String valorR = JOptionPane.showInputDialog(null, "Valor Recebido!");

            if(valorR.equals("")){
                return 0;
            }else{
                valorR = valorR.replace(',', '.');
                float valor = Float.parseFloat(valorR);
                return valor;
            }
        }else{
            return -1;
        }
    }    

    private void executaStatementVenda(Connection conexao, PreparedStatement stmtVenda, TrataNumeros trataNumeros, float valorRecebido) throws SQLException{
        if(this.cliente != null){
            stmtVenda.setInt(1, this.getVenda().getCod_ven());    
            stmtVenda.setFloat(2, this.getVenda().getVl_ven());
            stmtVenda.setFloat(3, this.getVenda().getVl_des_ven());
            stmtVenda.setString(4, trataNumeros.trataDatas(this.getVenda().getDt_com_prod()));
            stmtVenda.setString(5, this.getVenda().getHr_com_prod());
            stmtVenda.setShort(6, this.cliente.getConta().getCod_con());
            stmtVenda.execute();
        } else {
            stmtVenda.setInt(1, this.getVenda().getCod_ven());
            stmtVenda.setFloat(2, this.getVenda().getVl_ven());
            stmtVenda.setFloat(3, this.getVenda().getVl_des_ven());
            stmtVenda.setString(4, trataNumeros.trataDatas(this.getVenda().getDt_com_prod()));
            stmtVenda.setString(5, this.getVenda().getHr_com_prod());
            stmtVenda.setFloat(6, valorRecebido);
            stmtVenda.setFloat(7, (valorRecebido - this.getVenda().getVl_ven()));
            stmtVenda.execute();
        }
    }
    
    private String retornaSqlDaVenda() {
        if(this.cliente != null)
            return "INSERT INTO vendas (cod_ven, vl_ven, vl_des_ven, dt_com_prod, hr_com_prod, cod_con) VALUES (?, ?, ?, ?, ?, ?);";
        else
            return "INSERT INTO vendas (cod_ven, vl_ven, vl_des_ven, dt_com_prod, hr_com_prod, vl_recebido, vl_troco) VALUES (?, ?, ?, ?, ?, ?, ?);";
    }
    
    private void limpaCompra() throws SQLException {
        JOptionPane.showMessageDialog(null, "Venda efetuada com sucesso!!");
                
        DefaultTableModel modelo = (DefaultTableModel) this.getTabela().getModel();
        modelo.setNumRows(0);
        this.venda = new Venda();
        this.lTroco.setText("");
        this.lValor.setText("R$ 00,00");
        this.lValorRecebido.setText("");
        this.lUltimoAdicionado.setText("");
        this.cPesquisa.setFocusable(true);
        this.cliente = null;
        this.radioVista.setSelected(true);
        this.cli.setText("");
    }
    
    private void atualizarContaAposVenda(Connection conexao) throws SQLException {
        if(this.cliente != null){
            this.cliente.getConta().setDiv_con((this.cliente.getConta().getDiv_con() + this.getVenda().getVl_ven()));
            this.cliente.getConta().setSal_con(this.cliente.getConta().getSal_con() - this.getVenda().getVl_ven());
            this.cliente.getConta().setLim_con(this.cliente.getConta().getLim_con() - this.venda.getVl_ven());
            
            PreparedStatement stmt = conexao.prepareStatement("UPDATE contas SET div_con = ?, sal_con = ? WHERE cod_con = ?");
            stmt.setFloat(1, this.cliente.getConta().getDiv_con());
            stmt.setFloat(2, this.cliente.getConta().getSal_con());
            stmt.setShort(3, this.cliente.getConta().getCod_con());
            stmt.execute();
        }
    }
    
    private void gravaCompras(Connection conexao, Venda venda) throws SQLException {            
        for(Subtotal c : venda.getCompras()){
            PreparedStatement stmtCompra = conexao.prepareStatement("INSERT INTO subtotais (qtd_prod, cod_prod, cod_ven, vl_com, vl_des_com, vl_prod) VALUES ( ?, ?, ?, ?, ?, ?)");
            stmtCompra.setShort(1, c.getQtd_prod());
            stmtCompra.setShort(2, (short) c.getProduto().getCod_prod());
            stmtCompra.setShort(3, venda.getCod_ven());
            stmtCompra.setFloat(4, c.getVl_com());
            stmtCompra.setFloat(5, c.getVl_des_com());
            stmtCompra.setFloat(6, c.getVl_prod());
            stmtCompra.execute();

        }
    }
    
    private Produto montaProduto(ResultSet rs) throws SQLException{
        Produto produto = new Produto(Short.parseShort(rs.getString(1)), rs.getString(2), rs.getString(3), Float.parseFloat(rs.getString(4)),  rs.getString(5), rs.getBoolean(6), rs.getString(7), rs.getBoolean(8), rs.getShort(9));
        return produto;
    }
    
    private short quantidadeDeProdutos(Produto produto) throws EstoqueInsuficienteException{
        try{
            try{
                String qtdeP;
                
                if(produto.isUnidade()){
                    qtdeP = JOptionPane.showInputDialog(null, "Quantidade \n" + produto + "\n" + din.din(produto.getVl_prod()), "Quantidade", HEIGHT);
                   
                    if(qtdeP.equals("") && this.produtos.get(produto.getCod_prod()).getQtd_estoque() > 0){
                        return 1;
                    }else{
                        short qtde = Short.parseShort(qtdeP);
                                                
                        if(qtde > this.produtos.get(produto.getCod_prod()).getQtd_estoque()) 
                            throw new EstoqueInsuficienteException();
                        else
                            return qtde;
                    }
                }else{
                    qtdeP = JOptionPane.showInputDialog(null, "Peso, em gramas \n" + produto + "\n" + din.din(produto.getVl_prod()), "Peso", HEIGHT);
                    
                    if(qtdeP.equals("")){
                        new Mensagem().msg("Deve escolher uma quantidade em gramas!!");
                    }else if(Short.parseShort(qtdeP) > 0){
                        return Short.parseShort(qtdeP);
                    }
                }
            }catch(java.lang.NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Favor: Informe um numero inteiro!!");
                return -1;
            }catch(br.com.walison.lucros.excecoes.EstoqueInsuficienteException e1){
                if(produto.getQtd_estoque() == 0)
                    JOptionPane.showMessageDialog(null, "Não temos esse produto em estoque!!");
                else
                    JOptionPane.showMessageDialog(null, "Só tem " + this.produtos.get(produto.getCod_prod()).getQtd_estoque() + " unidades em estoque!!");
                
                return -1;
            }
        }catch(java.lang.NullPointerException e2){
            JOptionPane.showMessageDialog(null, "Cacelado!");
        }
        return -1;
    }
    
    private void adicionarCompraNaVenda(Subtotal compra, short quantidadeProduto){
        if(quantidadeProduto > 0){
            DefaultTableModel modeloTable = (DefaultTableModel) this.getTabela().getModel();

            if(this.getVenda().addCompra(compra)){

                if(compra.getProduto().isUnidade()){
                    Object linha[] = { ""+this.getVenda().getCompras().size(), compra.getProduto(), ""+ quantidadeProduto +" UN", din.din(compra.getVl_prod()), din.din(compra.getVl_com()) };
                    this.getlValor().setText(din.din(this.getVenda().getVl_ven()));
                    modeloTable.addRow(linha);
                }else{
                    Object linha[] = { ""+this.getVenda().getCompras().size(), compra.getProduto(), ""+ compra.converteGramaPraQuilo() +" KG", din.din(compra.getVl_prod()), din.din(compra.getVl_com()) };
                    this.getlValor().setText(din.din(this.getVenda().getVl_ven()));
                    modeloTable.addRow(linha);
                }
            }else{  
                modeloTable.setNumRows(0);
                int i = 1;
                for(Subtotal c : this.getVenda().getCompras()){
                    if(c.getProduto().isUnidade()){
                        Object linha[] = { ""+(i++), c.getProduto(), c.getQtd_prod() +" UN", din.din(c.getProduto().getVl_prod()), din.din(c.getVl_com()) };
                        this.getlValor().setText(din.din(this.getVenda().getVl_ven()));
                        modeloTable.addRow(linha);
                    }else{
                        Object linha[] = { ""+(i++), c.getProduto(), c.converteGramaPraQuilo() +" KG", din.din(c.getProduto().getVl_prod()), din.din(c.getVl_com()) };
                        this.getlValor().setText(din.din(this.getVenda().getVl_ven()));
                        modeloTable.addRow(linha);
                    }
                }
            }
           this.getcPesquisa().setText("");
        }
    }
    
    private void fecharVenda() throws SQLException, SaldoInsuficienteException, Exception {
        float valor = this.clienteEVazio();
        TrataNumeros trataNumeros = new TrataNumeros();
        
        if(valor >= this.venda.getVl_ven()){
            this.lValorRecebido.setText("VALOR RECEBIDO  " + this.din.din(valor));
            this.lTroco.setText("TRÔCO  " + this.din.din((valor - this.getVenda().getVl_ven())));
            
            this.getVenda().setVl_recebido(valor);
            this.getVenda().setVl_troco((valor - this.getVenda().getVl_ven()));
        }else if(valor < this.venda.getVl_ven() && valor > -1){
            throw new Exception();
        }  
        
        if(this.cliente != null && this.venda.getVl_ven() > this.cliente.getConta().getSal_con()){
            throw new SaldoInsuficienteException();
        }
        
        this.getVenda().setDataHora();

        Connection conexao = new Conexao().getConexao();
        String sqlVenda = this.retornaSqlDaVenda();   

        try {
            PreparedStatement stmtVenda = conexao.prepareStatement(sqlVenda); 

            this.executaStatementVenda(conexao, stmtVenda, trataNumeros, valor);

            this.gravaCompras(conexao, venda);
            this.venda.EscreverNota();
            this.venda.EscreverLinhaNota();
            this.venda.FecharNota();
            this.atualizarContaAposVenda(conexao);
            this.atualizarEstoqueAposVenda(conexao); 
            this.limpaCompra(); 
            
            conexao.commit();
            stmtVenda.close();
            conexao.close();
        } catch (SQLException ex) {
            System.err.print(ex);
            JOptionPane.showMessageDialog(null, "ERRO: venda não realizada, tente novamente!!");
            conexao.rollback();
        }finally {
            conexao.close();
        }
    }
     
    /**
     * @return the j
     */
    public Janela getJ() {
        return j;
    }

    /**
     * @param j the j to set
     */
    public void setJ(Janela j) {
        this.j = j;
    }

    /**
     * @return the cPesquisa
     */
    public javax.swing.JTextField getcPesquisa() {
        return cPesquisa;
    }

    /**
     * @return the cliente
     */
    public Cliente getCliente() {
        return cliente;
    }

    /**
     * @param cliente the cliente to set
     */
    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }

    /**
     * @return the cPesquisaCliente
     */
    public javax.swing.JTextField getcPesquisaCliente() {
        return cPesquisaCliente;
    }

    /**
     * @return the lbuscarCliente
     */
    public javax.swing.JLabel getLbuscarCliente() {
        return lbuscarCliente;
    }

    /**
     * @return the tabelaCli
     */
    public javax.swing.JTable getTabelaCli() {
        return tabelaCli;
    }

    /**
     * @return the panelCli
     */
    public javax.swing.JPanel getPanelCli() {
        return panelCli;
    }  

    /**
     * @return the j2
     */
    public Janela getJ2() {
        return j2;
    }

    /**
     * @param j2 the j2 to set
     */
    public void setJ2(Janela j2) {
        this.j2 = j2;
    }

    /**
     * @return the venda
     */
    public Venda getVenda() {
        return venda;
    }

    /**
     * @return the lValor
     */
    public javax.swing.JLabel getlValor() {
        return lValor;
    }

    /**
     * @return the tabela
     */
    public javax.swing.JTable getTabela() {
        return tabelaCompras;
    }

    /**
     * @return the produtos
     */
    public TreeMap<Integer, Produto> getProdutos() {
        return produtos;
    }

    /**
     * @param produtos the produtos to set
     */
    public void setProdutos(TreeMap<Integer, Produto> produtos) {
        this.produtos = produtos;
    }
}
